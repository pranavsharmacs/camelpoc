<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cxf="http://camel.apache.org/schema/cxf"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">


	<!-- Camel Contexts via XML configured -->
	<camel:camelContext id="camelContextXml"
		allowUseOriginalMessage="true">

		<camel:errorHandler id="noErrorHanlder" type="NoErrorHandler" />
		<camel:onException>
			<camel:exception>java.lang.Exception</camel:exception>
			<camel:log message="${exception}" />
		</camel:onException>

		<!-- <camel:route id="MCOMEventDataOrderProgress">
			<camel:from uri="ref:mcomEventDataOrderProgressInQ_2" />
			<camel:log message="${body}" />
		</camel:route> -->

		<!-- route that process the orders by picking up new rows from the database 
			and when done processing then update the row to mark it as processed -->
		<camel:route id="processOrder-route">
			<camel:from uri="timer:foo?period=5s" />
			<camel:to uri="sql:{{sql.selectOrder}}" />
			<camel:log message="Read the messages from DB" />
			<camel:log message="${body}" />
			<camel:to uri="ref:mcomEventDataOrderProgressInQ" />
		</camel:route>

	</camel:camelContext>


	<bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
		<property name="connectionFactory" ref="jmsConnectionFactory" />
		<!-- Use property below -->
		<property name="concurrentConsumers" value="1" />
	</bean>


	<!-- Gets a JMS Connection factory object from JDNI Server by jndiName -->
	<bean id="jmsConnectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiTemplate" ref="jndiTemplate" />
		<!-- Use property below -->
		<property name="jndiName" value="${sonic.conection-factory.name}" />
		<!-- the connection factory object is store under this name -->
	</bean>


	<bean id="jndiTemplate" class="org.springframework.jndi.JndiTemplate">
		<property name="environment">
			<props>
				<!-- Use property below -->
				<prop key="java.naming.factory.initial">${sonic.q.jndi.initialContext}</prop>
				<prop key="java.naming.provider.url">${sonic.q.connection.provider.url}</prop>
				<prop key="com.sonicsw.jndi.mfcontext.domain">${sonic.q.domain}</prop>
				<prop key="java.naming.security.principal">${sonic.q.username}</prop>
				<prop key="java.naming.security.credentials">${sonic.q.password}</prop>
			</props>
		</property>
	</bean>

	<!-- Define Sonic bean as a JMSComponent to be used by Camel Context, otherwise 
		Camel Context does not know about how to connect to Sonic -->
	<bean id="sonic" class="org.apache.camel.component.jms.JmsComponent">
		<property name="configuration" ref="jmsConfig" />
	</bean>

	<!-- End point to retrieve the Order status notification from MCOM at AIA 
		Side, configure the below as a property -->
	<camel:endpoint id="mcomEventDataOrderProgressInQ"
		uri="sonic:queue:${sonic.mcomEventDataOrderProgressInQ.q.name}?username=${sonic.q.username}&amp;password=${sonic.q.password}&amp;asyncConsumer=true;?jmsMessageType=text" />

	<camel:endpoint id="mcomEventDataOrderProgressInQ_2"
		uri="sonic:queue:gw.aia.event.mcom.orderprogress.v6.in.q?username=${sonic.q.username}&amp;password=${sonic.q.password}&amp;asyncConsumer=true;?jmsMessageType=text" />

	<!-- START SNIPPET: e1 -->
	<!-- this is the JDBC data source which uses an in-memory only Apache Derby 
		database -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://cord/correlator" />
		<property name="username" value="ivr_user" />
		<property name="password" value="ivr_password" />
	</bean>

	<!-- configure the Camel SQL component to use the JDBC data source -->
	<bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- END SNIPPET: e1 -->


</beans>